
PreLab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075e  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a8  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000112  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initUART>:
	uint8_t i;
	for (i=0; Texto[i]!='\0'; i++){
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
}
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	8a b9       	out	0x0a, r24	; 10
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
  a6:	80 81       	ld	r24, Z
  a8:	88 69       	ori	r24, 0x98	; 152
  aa:	80 83       	st	Z, r24
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c4:	08 95       	ret

000000c6 <UART_read>:
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = caracter;
}*/

unsigned char UART_read(){
	if (UCSR0A & (1<<7)){
  c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	88 23       	and	r24, r24
  cc:	1c f4       	brge	.+6      	; 0xd4 <UART_read+0xe>
		return UDR0;
  ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret
	} else {
		return 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  d6:	08 95       	ret

000000d8 <main>:
// Setup
//************************************************
int main(void)
{
    
	cli();
  d8:	f8 94       	cli
	
	DDRC = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<DDB4)|(1<<DDB5);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	80 63       	ori	r24, 0x30	; 48
  e2:	84 b9       	out	0x04, r24	; 4
	
	initUART();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <initUART>
	writeUART(13);
	writeTextUART("2. Enviar ascii");
	writeUART(10);
	writeUART(13);*/
	
	sei();
  e8:	78 94       	sei
	//********************************************
	// Loop
	//********************************************
    while (1){
		bufferTx = UART_read();
  ea:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_read>
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (bufferTx != 0){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	88 23       	and	r24, r24
  f8:	c1 f3       	breq	.-16     	; 0xea <main+0x12>
			PORTC = bufferTx & 0x7F;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	88 b9       	out	0x08, r24	; 8
			
			if (bufferTx & 0x80)
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	88 23       	and	r24, r24
 108:	24 f4       	brge	.+8      	; 0x112 <main+0x3a>
			{
				PORTB |= (1<<PORTB4);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	85 b9       	out	0x05, r24	; 5
 110:	03 c0       	rjmp	.+6      	; 0x118 <main+0x40>
			}
			else
			{
				PORTB &= ~(1<<PORTB4);
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	85 b9       	out	0x05, r24	; 5
			}
			
			if (bufferTx & 0x40)
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	86 ff       	sbrs	r24, 6
 11e:	04 c0       	rjmp	.+8      	; 0x128 <main+0x50>
			{
				PORTB |= (1<<PORTB5);
 120:	85 b1       	in	r24, 0x05	; 5
 122:	80 62       	ori	r24, 0x20	; 32
 124:	85 b9       	out	0x05, r24	; 5
 126:	e1 cf       	rjmp	.-62     	; 0xea <main+0x12>
			}
			else
			{
				PORTB &= ~(1<<PORTB5);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8f 7d       	andi	r24, 0xDF	; 223
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	dd cf       	rjmp	.-70     	; 0xea <main+0x12>

00000130 <__vector_18>:
	}
}
//************************************************
// ISR
//************************************************
ISR(USART_RX_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	bufferTx = UDR0;
 152:	e6 ec       	ldi	r30, 0xC6	; 198
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = bufferTx;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	80 83       	st	Z, r24
	UART_read(UDR0);
 162:	80 81       	ld	r24, Z
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_read>
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
