
PreLab6-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cd  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000057  00000000  00000000  000016f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UART_init>:
	{					
		UART_write(*cadena);				//transmite los caracteres de cadena
		cadena++;							//incrementa la ubicación de los caracteres en cadena
											//para enviar el siguiente caracter de cadena
	}
}
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	82 60       	ori	r24, 0x02	; 2
  94:	8a b9       	out	0x0a, r24	; 10
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a0:	88 e9       	ldi	r24, 0x98	; 152
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ac:	87 e6       	ldi	r24, 0x67	; 103
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b8:	08 95       	ret

000000ba <UART_read>:
  ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  be:	88 23       	and	r24, r24
  c0:	1c f4       	brge	.+6      	; 0xc8 <UART_read+0xe>
  c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c6:	08 95       	ret
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

000000cc <main>:


int main(void)
{
	
	DDRC = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DDD4) | (1 << DDB5);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	80 63       	ori	r24, 0x30	; 48
  d4:	84 b9       	out	0x04, r24	; 4
	UART_init();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <UART_init>
    
    while (1) {
		dato = UART_read();
  da:	0e 94 5d 00 	call	0xba	; 0xba <UART_read>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (dato != 0){
  e2:	88 23       	and	r24, r24
  e4:	d1 f3       	breq	.-12     	; 0xda <main+0xe>
			PORTC = dato & 0x7F;
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	88 b9       	out	0x08, r24	; 8
			if (dato & 0x80)
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	88 23       	and	r24, r24
  f0:	24 f4       	brge	.+8      	; 0xfa <main+0x2e>
			{
				PORTB |= (1<<PORTB4); 
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	03 c0       	rjmp	.+6      	; 0x100 <main+0x34>
			} 
			else
			{
				PORTB &= ~(1<<PORTB4);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8f 7e       	andi	r24, 0xEF	; 239
  fe:	85 b9       	out	0x05, r24	; 5
			}
			
			if (dato & 0x40)
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	86 ff       	sbrs	r24, 6
 106:	04 c0       	rjmp	.+8      	; 0x110 <main+0x44>
			{
				PORTB |= (1<<PORTB5);
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	e5 cf       	rjmp	.-54     	; 0xda <main+0xe>
			} 
			else
			{
				PORTB &= ~(1<<PORTB5);
 110:	85 b1       	in	r24, 0x05	; 5
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	85 b9       	out	0x05, r24	; 5
 116:	e1 cf       	rjmp	.-62     	; 0xda <main+0xe>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
